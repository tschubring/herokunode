<!DOCTYPE html>
<html>
<head>
  <% include ../partials/header.ejs %>
</head>

<script src="/jq/jquery-min.js"></script>
<script src="/jq/jquery.qrcode.min.js"></script>
<script src="/socket.io/socket.io.js"></script>
    <script src="libs/three.min.js"></script>
    <script src="libs/OBJLoader.js"></script>
    <script src="libs/display.js"></script>

<script>
var socket = io.connect();
var myRoomId=<%= rows[0].id %>;
console.log('room.ejs myRoomId='+myRoomId);
if(myRoomId != -1){
  socket.emit("subscribeRoom", { room: "room_"+myRoomId, userId:-1});
  socket.on("subscribeClientServer", function(data) {
    console.log("room on subscribeClientServer ");
    console.log(data);

    var ctx = canvas.getContext('2d');
    var pixel = canvas.toDataURL();
    console.log(typeof pixel);
    //console.log(pixel);

    socket.emit("haveMap", {"room": "room_"+myRoomId, "map":pixel});

  });

  socket.on('clientState', function(data) {
    //console.log("client.ejs clientState");
    //console.log(data);
    //socket.emit("roomState", { room: "room_"+myRoomId });
    var userIds=[];
    
    for (var b=0; b<boats.length; b++){
      userIds.push(boats[b].userId);
    }
    if(userIds.indexOf(data.userId)==-1){
      console.log("client.ejs clientState create");
      data.num=boats.length;
      boats.push(newBoat(data));
    }
    else{
      var ord=userIds.indexOf(data.userId);
      dbug(ord);
      boats[ord].iRads=data.iRads;
      boats[ord].control=data.control;
      boats[ord].pitch=data.pitch;
      boats[ord].speed=data.speed;
      boats[ord].x=data.x;
      boats[ord].z=data.z;
    }


  })

}
// begin copied from terrain2
var pi=Math.PI;
var useSize=512;
var dist=useSize/2;
var heightOffset=8;
var heightMap=[];
var mode="server";
var renderer;
var scene;
var camera;
var control;
var minVal=1000;
var maxVal=0;
var boats=[];
var canvas;


function tick(){
  for (var b=0; b<boats.length; b++){
    if(boats[b].loaded){

      var half=useSize/2;

      // loop physics cycles?
      boats[b].iRads+=boats[b].control;
      boats[b].pitch=boats[b].iRads;
      boats[b].x+=xRadiansScale(boats[b].iRads, boats[b].speed);
      boats[b].z-=yRadiansScale(boats[b].iRads, boats[b].speed);
  
      var carY=worldAlt(boats[b].x, boats[b].z);
  var frontX=boats[b].x+xRadiansScale(boats[b].iRads, 3);
  var frontZ=boats[b].z-yRadiansScale(boats[b].iRads, 3);
  var frontY=worldAlt(frontX, frontZ);

  var backX=boats[b].x+xRadiansScale(boats[b].iRads-pi, 3);
  var backZ=boats[b].z-yRadiansScale(boats[b].iRads-pi, 3);
  var backY=worldAlt(backX, backZ);
  var leftX=boats[b].x+xRadiansScale(boats[b].iRads+pi/2, 1.5);
  var leftZ=boats[b].z-yRadiansScale(boats[b].iRads+pi/2, 1.5);
  var leftY=worldAlt(leftX, leftZ);
  var rightX=boats[b].x+xRadiansScale(boats[b].iRads-pi/2, 1.5);
  var rightZ=boats[b].z-yRadiansScale(boats[b].iRads-pi/2, 1.5);
  var rightY=worldAlt(rightX, rightZ);

  //dbug("x:"+x+" . "+xFrac+" Z: "+z+" . "+zFrac+ " carY:"+Math.floor(carY*10)/10+" = "+Math.floor(cnw*100)/100+" "+Math.floor(cne*100)/100+" "+Math.floor(csw*100)/100+" "+Math.floor(cse*100)/100+" "+Math.floor(cSum*100)/100);
  
      var carSize=.5;
      boats[b].carYaw.position.x=boats[b].x;
      boats[b].carYaw.position.z=boats[b].z;
      boats[b].carYaw.position.y=carY+carSize;
      boats[b].carYaw.rotation.y=boats[b].iRads;
      boats[b].carRoll.rotation.x=leftY/5-rightY/5;
      boats[b].carPitch.rotation.z=frontY/8-backY/8;
      boats[b].model.rotation.x=leftY/5-rightY/5;
      if(mode != "server"){
        var camVec=boats[0].iRads-pi;
        camera.position.x = boats[0].x+xRadiansScale(camVec,camDist);
        camera.position.y = carY+camDist/2-4;
        camera.position.z = boats[0].z-yRadiansScale(camVec,camDist);
        camera.lookAt(boats[0].carYaw.position);
      }
    }
  }
}

var camDist=30;

function initScene() {
  // create a scene, that will hold all our elements such as objects, cameras and lights.
  scene = new THREE.Scene();
  // create a camera, which defines where we're looking at.
  camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 10000);
  // create a render, sets the background color and the size
  renderer = new THREE.WebGLRenderer();
  renderer.setClearColor(0x000000, 1.0);
  renderer.setSize(window.innerWidth, window.innerHeight);
  // add light
  var light = new THREE.DirectionalLight();
  light.position.set(1200, 1200, 1200);
  scene.add(light);
  var alight = new THREE.AmbientLight( 0x808080 ); // soft white light
  scene.add( alight );
  // position and point the camera to the center of the scene
  camera.position.x = 0;
  camera.position.y = 640;
  camera.position.z = 0;
  camera.lookAt(scene.position);
  camera.rotation.z=pi/2;
  // add the output of the renderer to the html element
  document.body.appendChild(renderer.domElement);


  canvas = document.createElement('canvas');
  canvas.width = useSize;
  canvas.height = useSize;
  var ctx = canvas.getContext('2d');



  generateIsland(ctx,useSize);

  var pixel = canvas.toDataURL();
  console.log(typeof pixel);
        var myImage = new Image();
        document.body.appendChild(myImage);
  myImage.src = pixel;

  createGeometryFromMap(ctx);


  // call the render function
  render();

  tickTimeout=window.setTimeout("emitTick()", 500);
}

var tickTimeout;
function emitTick(){
  window.clearTimeout(tickTimeout);
  //console.log('emitTick()');
  var cleanUsers=[];
  for (var b=0; b<boats.length; b++){
    var cleanUser={
      userId:boats[b].userId,
      control:boats[b].control,
      iRads:boats[b].iRads,
      pitch:boats[b].pitch,
      speed:boats[b].speed,
      x:boats[b].x,
      z:boats[b].z
    }
    cleanUsers.push(cleanUser);
  }
  var dataObj={
    room: "room_"+myRoomId,
    users:cleanUsers
  }  
  //console.log(dataObj);
  socket.emit("roomState", dataObj);  
  tickTimeout=window.setTimeout("emitTick()", 100);

}


function render() {
  tick();
  renderer.render(scene, camera);
  requestAnimationFrame(render);
}

</script>
<body onload="init();">

<% include ../partials/nav.ejs %>

<div class="container">
<script>
function init(){
  console.log('init()');
jQuery('#qrcode').qrcode(clientUrl);
  initScene();
}
var clientUrl=window.location.href.replace("room","client")+"?roomId="+myRoomId;
document.write('<a href="'+clientUrl+'" target="_blank">'+clientUrl+'</a>');
  </script>
<h2>Room <%= rows[0].id %> Created</h2>

<ul>
    <% rows.forEach(function(r) { %>
        <li><%= r.id %> - <%= JSON.stringify(r) %></li>
    <% }); %>
</ul>

<div id="qrcode"></div>
<div id="debug" >DEBUG</div>
</div>

</body>
</html>
