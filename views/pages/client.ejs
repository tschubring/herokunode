<!DOCTYPE html>
<html>
<head>
  <% include ../partials/header.ejs %>
</head>
<script src="/socket.io/socket.io.js"></script>
    <script src="libs/three.min.js"></script>
    <script src="libs/OBJLoader.js"></script>
    <script src="libs/display.js"></script>
<script>
//var srch=window.location.search.replace("?", "");
//var sets=srch.split("&");
  //for (var s=0; s<sets.length; s++){
    //var parts=sets[s].split("=");
    //if(parts[0]=="roomId"){myRoomId=parts[1];}
  //}
var myRoomId=181;
var myUserId=<%= rows[0].id %>;
var socket = io.connect();
var myImage;
  
console.log('client.ejs myRoomId='+myRoomId);

socket.emit("subscribeClient", { roomId: myRoomId, userId: myUserId, clientMs:new Date().getTime()});

socket.on('clientState', function(data) {
  if(runnable){
    var nowMs=new Date().getTime();
    //console.log("client.ejs clientState");
    //console.log(data);
    var userIds=[];
    for (var b=0; b<boats.length; b++){
      userIds.push(boats[b].userId);
    }    
    var user=data;
    if(userIds.indexOf(user.userId)==-1){
      console.log("client.ejs roomState create "+boats.length+" "+runnable);
      user.num=boats.length;
      user.updated=nowMs;
      boats.push(newBoat(user));
    }
    else{
      if(user.userId != myUserId){
        var ord=userIds.indexOf(user.userId);
        //dbug(ord);
        if(boats[ord].loaded){
          
          boats[ord].updated=nowMs;
          boats[ord].iRads=user.iRads;
          boats[ord].control=user.control;
          boats[ord].pitch=user.pitch;
          boats[ord].speed=user.speed;
          boats[ord].x=user.x;
          boats[ord].z=user.z;
          boats[ord].missileX=user.missileX;
          boats[ord].missileY=user.missileY;
          boats[ord].missileZ=user.missileZ;
          boats[ord].missileSpeed=user.missileSpeed;
          boats[ord].missileFired=user.missileFired;
          boats[ord].detonation=user.detonation;
        }
      }
    }
  }
});


/*
socket.on('roomState', function(data) {
  if(runnable){
      //console.log("client.ejs roomState");
      //console.log(data);
      var userIds=[];
      for (var b=0; b<boats.length; b++){
        userIds.push(boats[b].userId);
      }    
      for(var u=0; u<data.users.length; u++){
        var user=data.users[u];
        if(userIds.indexOf(user.userId)==-1){
          console.log("client.ejs roomState create "+boats.length+" "+runnable);
          user.num=boats.length;
          boats.push(newBoat(user));
        }
        else{
          if(user.userId != myUserId){
            var ord=userIds.indexOf(user.userId);
            //dbug(ord);
            if(boats[ord].loaded){
              boats[ord].iRads=user.iRads;
              boats[ord].control=user.control;
              boats[ord].pitch=user.pitch;
              boats[ord].speed=user.speed;
              boats[ord].x=user.x;
              boats[ord].z=user.z;
            }
          }
        }
      }
    }
});
*/
  
  socket.on('haveSeeds', function(data) {
    if(mapReceived==false){
      console.log("client.ejs haveSeeds "+data.seeds);
      mySeeds=JSON.parse(data.seeds);
      mapReceived=true;

      canvas = document.createElement('canvas');
      canvas.width = useSize;
      canvas.height = useSize;
      var ctx = canvas.getContext('2d');
      console.log(mySeeds);
      islandFromSeeds(ctx,useSize, mySeeds);

      var pixel = canvas.toDataURL();
      console.log(typeof pixel);
      myImage = new Image();
      document.getElementById('hideMe').appendChild(myImage);
      //createGeometryFromMap(ctx);
      myImage.onload=function(){
        console.log('myImage onload');
        var ctx = canvas.getContext('2d');
        ctx.drawImage(myImage, 0, 0);
        initScene();
      }
      myImage.src = pixel;

    }
  });

var mySeeds=[.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5,.5];
var saveMap="";
var mapReceived=false;
var sendTime=0;
var tickTimeout;
function emitTick(){
  window.clearTimeout(tickTimeout);
  //console.log('emitTick()');
  var dataObj={
    roomId:+myRoomId,
    userId:myUserId,
    control:boats[0].control,
    iRads:boats[0].iRads,
    loaded:false,
    local:false,
    pitch:boats[0].pitch,
    speed:boats[0].speed,
    x:boats[0].x,
    z:boats[0].z,
    missileX:boats[0].missileX,
    missileY:boats[0].missileY,
    missileZ:boats[0].missileZ,
    missileSpeed:boats[0].missileSpeed,
    missileIrads:boats[0].missileIrads,
    missileFired:boats[0].missileFired,
    detonation:boats[0].detonation
  }  
  //console.log(dataObj);
  socket.emit("clientState", dataObj);  
  tickTimeout=window.setTimeout("emitTick()", 100);

}


// begin copied from terrain2
var pi=Math.PI;
var useSize=512;
var dist=useSize/2;
var heightOffset=12;
var heightMap=[];
var mode="player";
var renderer;
var scene;
var camera;
var control;
var minVal=1000;
var maxVal=0;
var boats=[];
var camDist=30;
var canvas;
var myImage;
var runnable=false;
function tick(){
  var nowMs=new Date().getTime();
  boats[0].updated=nowMs;
  //dbug('tick');
  var culls=[];
  for (var b=0; b<boats.length; b++){
    if(boats[b].loaded){
      var deltaMs=nowMs-boats[b].updated;
      //dbuga(deltaMs);
      if(deltaMs>10000){
        culls.unshift(b);
      }
    }
  }
  for (var c=0; c<culls.length; c++){
    var gone=boats.splice(culls[c],1)[0];
    scene.remove(gone.carYaw);
    scene.remove(gone.missileModel);
  }
  // once to calc, 
  for (var b=0; b<boats.length; b++){
    if(boats[b].loaded){
      runnable=true;
      var half=useSize/2;

      // loop physics cycles?
      boats[b].iRads+=boats[b].control;
      if(boats[b].spinout>0){
        boats[b].spinout-=.01;
        boats[b].pitch+=.5;
      }
      else{
        boats[b].pitch=boats[b].iRads;
      }
      boats[b].x+=xRadiansScale(boats[b].iRads, boats[b].speed);
      boats[b].z-=yRadiansScale(boats[b].iRads, boats[b].speed);
      boats[b].y=worldAlt(boats[b].x, boats[b].z);


      boats[b].frontX=boats[b].x+xRadiansScale(boats[b].pitch, 3);
      boats[b].frontZ=boats[b].z-yRadiansScale(boats[b].pitch, 3);
      boats[b].frontY=worldAlt(boats[b].frontX, boats[b].frontZ);

      boats[b].backX=boats[b].x+xRadiansScale(boats[b].pitch-pi, 3);
      boats[b].backZ=boats[b].z-yRadiansScale(boats[b].pitch-pi, 3);
      boats[b].backY=worldAlt(boats[b].backX, boats[b].backZ);
      boats[b].leftX=boats[b].x+xRadiansScale(boats[b].pitch+pi/2, 1.5);
      boats[b].leftZ=boats[b].z-yRadiansScale(boats[b].pitch+pi/2, 1.5);
      boats[b].leftY=worldAlt(boats[b].leftX, boats[b].leftZ);
      boats[b].rightX=boats[b].x+xRadiansScale(boats[b].pitch-pi/2, 1.5);
      boats[b].rightZ=boats[b].z-yRadiansScale(boats[b].pitch-pi/2, 1.5);
      boats[b].rightY=worldAlt(boats[b].rightX, boats[b].rightZ);
      if(boats[b].missileFired==false){
        boats[b].missileX=boats[b].frontX;
        boats[b].missileZ=boats[b].frontZ;
        boats[b].missileY=boats[b].frontY+1;    
        boats[b].missileIrads=boats[b].pitch;    
        boats[b].missileSpeed=2;    
      }
      else{// missile is fired
        if(boats[b].detonation>0){//detonating
          boats[b].detonation-=.02;
          if(boats[b].detonation<=0){// completed detonation, reset
            boats[b].missileFired=false;
            boats[b].detonation=0;
            boats[b].missileX=boats[b].frontX;
            boats[b].missileZ=boats[b].frontZ;
            boats[b].missileY=boats[b].frontY+1;    
            boats[b].missileIrads=boats[b].pitch;
            boats[b].missileModel.scale.set(.5,.5,.5);
            boats[b].missileModel.material.opacity=1;

          }
          else{//display detonating
            var s=1+6*(.5+(1-boats[b].detonation));
            var o=(boats[b].detonation);
            boats[b].missileModel.scale.set(s,s,s);
            boats[b].missileModel.material.opacity=o;
          } 
        }
        else{// fire and hit test
          var triggered=false;
          if(boats[b].missileX<(0-useSize/2)){triggered=true;}
          if(boats[b].missileZ<(0-useSize/2)){triggered=true;}
          if(boats[b].missileX>(useSize/2)){triggered=true;}
          if(boats[b].missileZ>(useSize/2)){triggered=true;}

          for (var t=0; t<boats.length; t++){
            if(t !=b){
              var dx=boats[t].x-boats[b].missileX;
              var dz=boats[t].z-boats[b].missileZ;
              var dist=Math.sqrt(dx*dx+dz*dz);
              if(dist<10){
                var rads=xyxyToRads(boats[b].missileX,boats[b].missileZ,boats[t].x,boats[t].z);
                boats[t].speed=1;
                boats[t].spinout=1;
                boats[t].iRads=rads;
                triggered=true;
              }
            }
          }

          if(triggered){
            boats[b].detonation=1
          }
          else{//carry on.
            boats[b].missileX+=xRadiansScale(boats[b].missileIrads, boats[b].missileSpeed);
            boats[b].missileZ-=yRadiansScale(boats[b].missileIrads, boats[b].missileSpeed);
            boats[b].missileY=worldAlt(boats[b].missileX, boats[b].missileZ)+1;
            boats[b].missileModel.scale.set(1,1,1);
            boats[b].missileModel.material.opacity=1;
          }
        }
      }
    }
  }

  for (var b=0; b<boats.length; b++){
    if(boats[b].loaded){
      var carSize=.5;
      boats[b].missileModel.position.x=boats[b].missileX;
      boats[b].missileModel.position.y=boats[b].missileY;
      boats[b].missileModel.position.z=boats[b].missileZ;
      boats[b].carYaw.position.x=boats[b].x;
      boats[b].carYaw.position.y=boats[b].y+carSize;
      boats[b].carYaw.position.z=boats[b].z;
      boats[b].carYaw.rotation.y=boats[b].pitch;
      boats[b].carRoll.rotation.x=boats[b].leftY/5-boats[b].rightY/5;
      boats[b].carPitch.rotation.z=boats[b].frontY/8-boats[b].backY/8;
      boats[b].model.rotation.x=boats[b].leftY/5-boats[b].rightY/5;
    }
  }
  if(mode != "server"){
    var camVec=boats[0].iRads-pi;
    camera.position.x = boats[0].x+xRadiansScale(camVec,camDist);
    camera.position.y = boats[0].y+camDist/2-4;
    camera.position.z = boats[0].z-yRadiansScale(camVec,camDist);
    camera.lookAt(boats[0].carYaw.position);
  }
  dbug(boats[0].missileFired+" "+boats[0].detonation);

}


function init(){
  //initScene();
}
var controls;
function initScene() {
  console.log('initScene');
  // create a scene, that will hold all our elements such as objects, cameras and lights.
  scene = new THREE.Scene();
  // create a camera, which defines where we're looking at.
  camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 10000);
  // create a render, sets the background color and the size
  renderer = new THREE.WebGLRenderer();
  renderer.setClearColor(0x000000, 1.0);
  renderer.setSize(window.innerWidth, window.innerHeight);
  // add light
  var light = new THREE.DirectionalLight();
  light.position.set(1200, 1200, 1200);
  scene.add(light);
  var alight = new THREE.AmbientLight( 0x404040 ); // soft white light
  scene.add( alight );
  // position and point the camera to the center of the scene
  camera.position.x = 0;
  camera.position.y = 640;
  camera.position.z = 0;
  camera.lookAt(scene.position);
        camera.rotation.z=pi/2;

  // add the output of the renderer to the html element
  document.body.appendChild(renderer.domElement);
  renderer.domElement.style.position="absolute";
  boats.push(newBoat({num:0, userId:myUserId, loaded:false, local:true, x:0, z:0, speed:1, pitch:0, iRads:0, control:-.01, missileX:0,missileY:0,missileZ:0,missileSpeed:1,missileIrads:0, missileFired:false, detonation:0}));

  var ctx=canvas.getContext('2d');
  createGeometryFromMap(ctx);

  controls = document.createElement('canvas');
  document.body.appendChild(controls); // adds the canvas to the body element
  controls.width=window.innerWidth;
  controls.height=window.innerHeight;
  controls.style.backgroundColor="rgba(255,0,0,.5)";
  controls.style.margin=0;
  controls.style.position="absolute";
  // call the render function
  render();
        document.getElementById('hideMe').style.display="none";

  document.onkeydown = downKey;
  document.onkeyup = upKey;
  tickTimeout=window.setTimeout("emitTick()", 100);

  //window.setTimeout("window.location.reload()",60000);
}
function touchStart(e){
  e.preventDefault ();
  console.log(e.touches);
}
function touchMove(e){
  e.preventDefault ();
  console.log(e.touches);
}
function touchEnd(e){
  e.preventDefault ();
  console.log(e.touches);
}

function downKey(e) {
  //return false;
  e.preventDefault();
  console.log(e.keyCode);

    if (e.keyCode == '38') {
  // up arrow
      camDist-=2;
  //console.log(nextX+" "+nextY+" "+nextZ);
    }
    else if (e.keyCode == '40') {
       // down arrow
       camDist+=2;
    }
    else if (e.keyCode == '32') {
      // space
      if(boats[0].missileFired==false){
        boats[0].missileFired=true;
      }
    }
    else if (e.keyCode == '191') {
      // slash
      boats[0].speed=Math.abs(boats[0].speed-1);
      // space
    }
    else if (e.keyCode == '37') {
       // left arrow
    //console.log("left "); 
    boats[0].control=.02;
    }
    else if (e.keyCode == '39') {
       // right arrow
       //console.log("right ");
      boats[0].control=-.02;
    }
  
}

function upKey(e) {
  //return false;
  console.log('upKey '+e.keyCode);
  boats[0].control=0;
} 

function render() {
  tick();
  renderer.render(scene, camera);
  requestAnimationFrame(render);
}

</script>
<body onload="init()">

<!--<% include ../partials/nav.ejs %>-->

<div class="container">
  <div id="hideMe">
    <h2>User <%= rows[0].name %> Created</h2>
<!--
    <button onclick="emitTick()">emitTick</button>
 -->
    <ul>
      <% rows.forEach(function(r) { %>
        <li><%= r.id %> - <%= JSON.stringify(r) %></li>
      <% }); %>
    </ul>
    <div id="network"></div>
    <div id="debug" >DEBUG</div>
  </div>
</div>

</body>
</html>
